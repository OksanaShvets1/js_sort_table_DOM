{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","table","querySelector","headers","querySelectorAll","tableBody","rows","directions","Array","from","map","header","transform","index","content","type","getAttribute","parseFloat","slice","forEach","call","direction","multiplier","newRows","sort","rowA","rowB","cellA","innerHTML","cellB","a","b","row","removeChild","newRow","appendChild","sortColumn"],"mappings":";AAAA,aAGAA,SAASC,iBAAiB,mBAAoB,WACtCC,IAAAA,EAAQF,SAASG,cAAc,SAC/BC,EAAUF,EAAMG,iBAAiB,MACjCC,EAAYJ,EAAMC,cAAc,SAChCI,EAAOD,EAAUD,iBAAiB,MAElCG,EAAaC,MAAMC,KAAKN,GAASO,IAAI,SAASC,GAC3C,MAAA,KAGHC,EAAY,SAASC,EAAOC,GAGxBC,OAFKZ,EAAQU,GAAOG,aAAa,cAGlC,IAAA,SACIC,OAAAA,WAAWH,EAAQI,MAAM,GAAI,IACjC,IAAA,SACL,QACSJ,OAAAA,IAmCVK,GAAAA,QAAQC,KAAKjB,EAAS,SAASQ,EAAQE,GACxCF,EAAOX,iBAAiB,QAAS,YAhChB,SAASa,GACpBQ,IAAAA,EAAYd,EAAWM,IAAU,MACjCS,EAA4B,QAAdD,EAAuB,GAAK,EAE1CE,EAAUf,MAAMC,KAAKH,GAE3BiB,EAAQC,KAAK,SAASC,EAAMC,GACpBC,IAAAA,EAAQF,EAAKrB,iBAAiB,MAAMS,GAAOe,UAC3CC,EAAQH,EAAKtB,iBAAiB,MAAMS,GAAOe,UAE3CE,EAAIlB,EAAUC,EAAOc,GACrBI,EAAInB,EAAUC,EAAOgB,GAEnB,QAAA,GACDC,KAAAA,EAAIC,EAAU,OAAA,EAAIT,EAClBQ,KAAAA,EAAIC,EAAU,OAAC,EAAIT,EACnBQ,KAAAA,IAAMC,EAAU,OAAA,KAItBZ,GAAAA,QAAQC,KAAKd,EAAM,SAAS0B,GAC7B3B,EAAU4B,YAAYD,KAGxBzB,EAAWM,GAAuB,QAAdQ,EAAsB,OAAS,MAEnDE,EAAQJ,QAAQ,SAASe,GACvB7B,EAAU8B,YAAYD,KAMtBE,CAAWvB","file":"main.3cf65a3f.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// write code here\ndocument.addEventListener('DOMContentLoaded', function() {\n  const table = document.querySelector('table');\n  const headers = table.querySelectorAll('th');\n  const tableBody = table.querySelector('tbody');\n  const rows = tableBody.querySelectorAll('tr');\n\n  const directions = Array.from(headers).map(function(header) {\n    return '';\n  });\n\n  const transform = function(index, content) {\n    const type = headers[index].getAttribute('data-type');\n\n    switch (type) {\n      case 'number':\n        return parseFloat(content.slice(1, -1));\n      case 'string':\n      default:\n        return content;\n    }\n  };\n\n  const sortColumn = function(index) {\n    const direction = directions[index] || 'asc';\n    const multiplier = (direction === 'asc') ? 1 : -1;\n\n    const newRows = Array.from(rows);\n\n    newRows.sort(function(rowA, rowB) {\n      const cellA = rowA.querySelectorAll('td')[index].innerHTML;\n      const cellB = rowB.querySelectorAll('td')[index].innerHTML;\n\n      const a = transform(index, cellA);\n      const b = transform(index, cellB);\n\n      switch (true) {\n        case a > b: return 1 * multiplier;\n        case a < b: return -1 * multiplier;\n        case a === b: return 0;\n      }\n    });\n\n    [].forEach.call(rows, function(row) {\n      tableBody.removeChild(row);\n    });\n\n    directions[index] = direction === 'asc' ? 'desc' : 'asc';\n\n    newRows.forEach(function(newRow) {\n      tableBody.appendChild(newRow);\n    });\n  };\n\n  [].forEach.call(headers, function(header, index) {\n    header.addEventListener('click', function() {\n      sortColumn(index);\n    });\n  });\n});\n"]}